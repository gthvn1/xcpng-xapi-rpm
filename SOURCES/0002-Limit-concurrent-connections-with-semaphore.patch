From c07039d247725b2f2427a09781b52faab6faefa7 Mon Sep 17 00:00:00 2001
From: Rob Hoes <rob.hoes@citrix.com>
Date: Mon, 11 Jul 2022 16:28:21 +0000
Subject: [PATCH 2/5] Limit concurrent connections with semaphore

To add some protection against overloading the server, and running out
of file descriptors and other resources, the number of concurrent
connections is now limited to 800 by default. Connections coming in when
the limit has been reached are put on hold, and not accepted until
another connection finishes.

There are two separate buckets for connections to the main unix
socket and the TCP socket.

This also add some more debug logging when connections are accepted and
disconnected. This is disabled by default along with other "http" logs,
but can be enabled in the conf file.

Signed-off-by: Rob Hoes <rob.hoes@citrix.com>
(cherry picked from commit 31d35ed6fe5974f1c2de24581bc076f5b5c6ac7e)
---
 ocaml/database/database_server_main.ml | 2 +-
 ocaml/xapi/xapi.ml                     | 6 +++++-
 ocaml/xapi/xapi_globs.ml               | 6 ++++++
 ocaml/xapi/xapi_mgmt_iface.ml          | 5 +++--
 4 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/ocaml/database/database_server_main.ml b/ocaml/database/database_server_main.ml
index 839b8799e..04104b978 100644
--- a/ocaml/database/database_server_main.ml
+++ b/ocaml/database/database_server_main.ml
@@ -83,7 +83,7 @@ let _ =
           (Http_svr.BufIO remote_database_access_handler_v1) ;
         Http_svr.Server.add_handler server Http.Post "/post_remote_db_access_v2"
           (Http_svr.BufIO remote_database_access_handler_v2) ;
-        Http_svr.start server socket ;
+        Http_svr.start ~conn_limit:1024 server socket ;
         Printf.printf "server listening\n%!" ;
         if !self_test then (
           Printf.printf "Running unit-tests\n%!" ;
diff --git a/ocaml/xapi/xapi.ml b/ocaml/xapi/xapi.ml
index 1475733c7..08704ae52 100644
--- a/ocaml/xapi/xapi.ml
+++ b/ocaml/xapi/xapi.ml
@@ -807,7 +807,11 @@ let listen_unix_socket sock_path =
   Unixext.mkdir_safe (Filename.dirname sock_path) 0o700 ;
   Unixext.unlink_safe sock_path ;
   let domain_sock = Xapi_http.bind (Unix.ADDR_UNIX sock_path) in
-  ignore (Http_svr.start Xapi_http.server domain_sock)
+  ignore
+    (Http_svr.start
+       ~conn_limit:!Xapi_globs.conn_limit_unix
+       Xapi_http.server domain_sock
+    )
 
 let set_stunnel_timeout () =
   try
diff --git a/ocaml/xapi/xapi_globs.ml b/ocaml/xapi/xapi_globs.ml
index 4cb50f508..9fb924545 100644
--- a/ocaml/xapi/xapi_globs.ml
+++ b/ocaml/xapi/xapi_globs.ml
@@ -877,6 +877,10 @@ let sqlite3 = ref "/usr/bin/sqlite3"
 
 let samba_dir = "/var/lib/samba"
 
+let conn_limit_tcp = ref 800
+
+let conn_limit_unix = ref 1024
+
 let xapi_globs_spec =
   [
     ( "master_connection_reset_timeout"
@@ -950,6 +954,8 @@ let xapi_globs_spec =
   ; ( "winbind_update_closest_kdc_interval"
     , Float winbind_update_closest_kdc_interval
     )
+  ; ("conn_limit_tcp", Int conn_limit_tcp)
+  ; ("conn_limit_unix", Int conn_limit_unix)
   ]
 
 let options_of_xapi_globs_spec =
diff --git a/ocaml/xapi/xapi_mgmt_iface.ml b/ocaml/xapi/xapi_mgmt_iface.ml
index 510e730a0..c8aee582f 100644
--- a/ocaml/xapi/xapi_mgmt_iface.ml
+++ b/ocaml/xapi/xapi_mgmt_iface.ml
@@ -54,7 +54,7 @@ let _restart_stunnel_no_cache ~__context ~accept =
   in
   ()
 
-let restart_stunnel ~__context ~accept =
+  let restart_stunnel ~__context ~accept =
   info "Restarting stunnel (accepting connections on %s)" accept ;
   (* cache `accept` so client can call `reconfigure_stunnel` easily *)
   Mutex.execute stunnel_accept_m (fun () -> stunnel_accept := Some accept) ;
@@ -113,7 +113,8 @@ let start ~__context ?addr () =
         )
       )
   in
-  Http_svr.start Xapi_http.server socket ;
+  Http_svr.start ~conn_limit:!Xapi_globs.conn_limit_tcp Xapi_http.server
+    socket ;
   management_interface_server := socket :: !management_interface_server ;
   restart_stunnel ~__context ~accept ;
   if Pool_role.is_master () && addr = None then
-- 
2.31.1


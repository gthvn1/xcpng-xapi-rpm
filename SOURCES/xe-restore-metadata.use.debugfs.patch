diff --git a/scripts/Makefile b/scripts/Makefile
index bf2f9fbbc..402825fc1 100644
--- a/scripts/Makefile
+++ b/scripts/Makefile
@@ -109,7 +109,6 @@ install:
 	$(IPROG) print-custom-templates $(DESTDIR)$(LIBEXECDIR)
 	$(IPROG) backup-sr-metadata.py $(DESTDIR)$(LIBEXECDIR)
 	$(IPROG) restore-sr-metadata.py $(DESTDIR)$(LIBEXECDIR)
-	$(IPROG) probe-device-for-file $(DESTDIR)$(LIBEXECDIR)
 	$(IPROG) backup-metadata-cron $(DESTDIR)$(LIBEXECDIR)
 	$(IPROG) pbis-force-domain-leave $(DESTDIR)$(LIBEXECDIR)
 	mkdir -p $(DESTDIR)/etc/sysconfig
diff --git a/scripts/probe-device-for-file b/scripts/probe-device-for-file
deleted file mode 100755
index 2174c5aa6..000000000
--- a/scripts/probe-device-for-file
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/python
-# (c) Anil Madhavapeddy, Citrix Systems Inc, 2008
-# Checks for the existence of a file on a device
-
-import os, sys
-try:
-   import xenfsimage
-except ImportError:
-   import fsimage as xenfsimage
-from contextlib import contextmanager
-
-# https://stackoverflow.com/a/17954769
-@contextmanager
-def stderr_redirected(to=os.devnull):
-    '''
-    import os
-
-    with stderr_redirected(to=filename):
-        print("from Python")
-        os.system("echo non-Python applications are also supported")
-    '''
-    fd = sys.stderr.fileno()
-
-    ##### assert that Python and C stdio write using the same file descriptor
-    ####assert libc.fileno(ctypes.c_void_p.in_dll(libc, "stderr")) == fd == 1
-
-    def _redirect_stderr(to):
-        sys.stderr.close() # + implicit flush()
-        os.dup2(to.fileno(), fd) # fd writes to 'to' file
-        sys.stderr = os.fdopen(fd, 'w') # Python writes to fd
-
-    with os.fdopen(os.dup(fd), 'w') as old_stderr:
-        with open(to, 'w') as file:
-            _redirect_stderr(to=file)
-        try:
-            yield # allow code to be run with the redirected stderr
-        finally:
-            _redirect_stderr(to=old_stderr) # restore stderr.
-                                            # buffering and flags such as
-                                            # CLOEXEC may be different
-
-if __name__ == "__main__":
-    if len(sys.argv) != 3:
-       print "Usage: %s <device> <file>" % sys.argv[0]
-       sys.exit(2)
-    device = sys.argv[1]
-    file = sys.argv[2]
-    try:
-        # CA-316241 - fsimage prints to stderr
-        with stderr_redirected(to="/dev/null"):
-            fs = xenfsimage.open(device, 0)
-            if fs.file_exists(file):
-                os._exit(0)
-    except:
-        pass
-    os._exit(1)
diff --git a/scripts/xe-restore-metadata b/scripts/xe-restore-metadata
index 78be9188c..4dc56e9d6 100755
--- a/scripts/xe-restore-metadata
+++ b/scripts/xe-restore-metadata
@@ -2,6 +2,14 @@
 # Script which restores metadata into a VDI
 # Citrix Systems Inc, 2008
 
+function file_exists() {
+	local out
+	out="$(debugfs -R "stat $2" "$1" 2>/dev/null | head -n1 | grep "Type: regular")"
+	if [ -n "${out}" ]; then
+		echo y
+	fi
+}
+
 if [ ! -e @INVENTORY@ ]; then
   echo Must run on a Citrix Hypervisor host.
   exit 1
@@ -173,22 +181,19 @@ for vdi_uuid in ${vdis}; do
    ${debug} echo ${device} >&2
 
    ${debug} echo -n "Probing device: " >&2
-   probecmd="@LIBEXECDIR@/probe-device-for-file"
-   metadata_stamp="/.ctxs-metadata-backup"
    mnt=
-   ${probecmd} ${device} ${metadata_stamp}
-   if [ $? -eq 0 ]; then
+   if [ "$(file_exists "${device}" "/.ctxs-metadata-backup")" = y ]; then
      ${debug} echo found metadata backup >&2
      ${debug} echo -n "Mounting filesystem: " >&2
      mnt=/var/run/pool-backup-${vdi_uuid}
      mkdir -p ${mnt}
-     /sbin/fsck -a ${device} >/dev/null 2>&1
+     /sbin/e2fsck -p -f "${device}" >/dev/null 2>&1
      if [ $? -ne 0 ]; then
         echo File system integrity error.  Please correct manually. >&2
         cleanup
         continue
      fi
-     mount ${device} ${mnt} >/dev/null 2>&1
+     mount -o ro,nosuid,noexec,nodev "${device}" "${mnt}" >/dev/null 2>&1
      if [ $? -ne 0 ]; then
        ${debug} echo failed >&2
        cleanup
